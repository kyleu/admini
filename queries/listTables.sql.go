// Code generated by qtc from "ListTables.sql". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// --

//line queries/ListTables.sql:1
package queries

//line queries/ListTables.sql:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line queries/ListTables.sql:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line queries/ListTables.sql:1
func StreamListTables(qw422016 *qt422016.Writer, schema string) {
//line queries/ListTables.sql:1
	qw422016.N().S(`
select
  n.nspname as "schema",
  c.relname as "name",
  case c.relkind
    when 'r' then 'table'
    when 'v' then 'view'
    when 'm' then 'materialized view'
    when 'i' then 'index'
    when 'S' then 'sequence'
    when 's' then 'special'
    when 'f' then 'foreign table'
    when 'p' then 'partitioned table'
    when 'I' then 'partitioned index'
  end as "type",
  pg_catalog.pg_get_userbyid(c.relowner) as "owner"
from
  pg_catalog.pg_class c
  left join pg_catalog.pg_namespace n ON n.oid = c.relnamespace
where
  c.relkind IN ('r','p','v','m','S','f','')
  and n.nspname not in ('information_schema', 'pg_catalog')
  and n.nspname !~ '^pg_toast'
  `)
//line queries/ListTables.sql:24
	if schema != "" {
//line queries/ListTables.sql:24
		qw422016.N().S(`
  and n.nspname = '`)
//line queries/ListTables.sql:25
		qw422016.E().S(schema)
//line queries/ListTables.sql:25
		qw422016.N().S(`'
  `)
//line queries/ListTables.sql:26
	}
//line queries/ListTables.sql:26
	qw422016.N().S(`
order by
  "schema",
  "name"
;
-- `)
//line queries/ListTables.sql:31
}

//line queries/ListTables.sql:31
func WriteListTables(qq422016 qtio422016.Writer, schema string) {
//line queries/ListTables.sql:31
	qw422016 := qt422016.AcquireWriter(qq422016)
//line queries/ListTables.sql:31
	StreamListTables(qw422016, schema)
//line queries/ListTables.sql:31
	qt422016.ReleaseWriter(qw422016)
//line queries/ListTables.sql:31
}

//line queries/ListTables.sql:31
func ListTables(schema string) string {
//line queries/ListTables.sql:31
	qb422016 := qt422016.AcquireByteBuffer()
//line queries/ListTables.sql:31
	WriteListTables(qb422016, schema)
//line queries/ListTables.sql:31
	qs422016 := string(qb422016.B)
//line queries/ListTables.sql:31
	qt422016.ReleaseByteBuffer(qb422016)
//line queries/ListTables.sql:31
	return qs422016
//line queries/ListTables.sql:31
}
